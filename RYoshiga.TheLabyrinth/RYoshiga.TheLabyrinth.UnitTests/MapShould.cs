using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using Shouldly;
using Xunit;

namespace RYoshiga.TheLabyrinth.UnitTests
{
    public class MapShould
    {
        [Fact]
        public void ScanProperly()
        {
            var map = new Map(10, 10);

            map.SetRow("#####?????", 0);
            map.SetRow("#T..??????", 1);
            map.SetRow("##..??????", 2);
            map.SetRow("#...??????", 3);
            map.SetRow("??????????", 4);
            map.SetRow("??????????", 5);
            map.SetRow("??????????", 6);
            map.SetRow("??????????", 7);
            map.SetRow("??????????", 8);
            map.SetRow("??????????", 9);

            var decideWhereToGo = map.DecideWhereToGo(new Point(1, 1));
            decideWhereToGo.ShouldBe("RIGHT");

            map.SetRow("######????", 0);
            map.SetRow("#T...?????", 1);
            map.SetRow("##...????", 2);
            map.SetRow("#....?????", 3);
            map.SetRow("#?????????", 4);
            map.SetRow("#?????????", 5);
            map.SetRow("??????????", 6);
            map.SetRow("??????????", 7);
            map.SetRow("??????????", 8);
            map.SetRow("??????????", 9);

            decideWhereToGo = map.DecideWhereToGo(new Point(1, 2));
            decideWhereToGo.ShouldBe("DOWN");

            map.SetRow("######????", 0);
            map.SetRow("#T...?????", 1);
            map.SetRow("##...????", 2);
            map.SetRow("#....?????", 3);
            map.SetRow("#....?????", 4);
            map.SetRow("#?????????", 5);
            map.SetRow("??????????", 6);
            map.SetRow("??????????", 7);
            map.SetRow("??????????", 8);
            map.SetRow("??????????", 9);

            decideWhereToGo = map.DecideWhereToGo(new Point(2, 2));
            decideWhereToGo.ShouldBe("DOWN");
        }

        [Fact]
        public void NotGetStuck()
        {
            var map = new Map(6, 9);

            map.SetRow("#####.????", 0);
            map.SetRow("#T..#.????", 1);
            map.SetRow("#.##..????", 2);
            map.SetRow("#.###.????", 3);
            map.SetRow("#.....????", 4);
            map.SetRow("##########", 5);

            var decideWhereToGo = map.DecideWhereToGo(new Point(1, 2));
            decideWhereToGo.ShouldBe("LEFT");

            decideWhereToGo = map.DecideWhereToGo(new Point(1, 3));
            decideWhereToGo.ShouldBe("LEFT");

            decideWhereToGo = map.DecideWhereToGo(new Point(1, 1));
            decideWhereToGo.ShouldBe("DOWN");
        }

        [Fact]
        public void SimplyGoRight()
        {
            var map = new Map(6, 9);

            map.SetRow("#######??", 0);
            map.SetRow("#T.....??", 1);
            map.SetRow("#######??", 2);
            map.SetRow("#######??", 3);
            map.SetRow("#.....???", 4);
            map.SetRow("#########", 5);

            var decideWhereToGo = map.DecideWhereToGo(new Point(1, 1));
            decideWhereToGo.ShouldBe("RIGHT");

            decideWhereToGo = map.DecideWhereToGo(new Point(1, 2));
            decideWhereToGo.ShouldBe("RIGHT");

            decideWhereToGo = map.DecideWhereToGo(new Point(1, 3));
            decideWhereToGo.ShouldBe("RIGHT");
        }

        [Fact]
        public void NotGoToTheWall()
        {
            var strings = new List<string>()
            {
                "?????????????????####.....##??",
                "?????????????????.##########??",
                "?????????????????.#......T##??",
                "?????????????????.#.#######.??",
                "?????????????????##...#####.??",
                "?????????????????####.????????",
                "??????????????????????????????",
                "??????????????????????????????",
                "??????????????????????????????",
                "??????????????????????????????",
                "??????????????????????????????",
                "??????????????????????????????",
                "??????????????????????????????",
                "??????????????????????????????",
                "??????????????????????????????",
            };
            var map = new Map(strings.Count, strings.First().Length);

            for (int i = 0; i < strings.Count; i++)
            {
                map.SetRow(strings[i], i);
            }

            var decideWhereToGo = map.DecideWhereToGo(new Point(3, 19));
            decideWhereToGo.ShouldBe("DOWN");
        }

        [Fact]
        public void NotTakeToolong()
        {
            var strings = new List<string>()
            {
                "#####?????????????????????????",
                "#T..............??????????????",
                "##..............??????????????",
                "#...............??????????????",
                "#...............??????????????",
                "#...............??????????????",
                "?...............??????????????",
                "?...............??????????????",
                "?...............??????????????",
                "?....................?????????",
                "?....................?????????",
                "?....................?????????",
                "?....................?????????",
                "?....................?????????",
                "?####################?????????"
            };
            var map = new Map(strings.Count, strings.First().Length);

            for (int i = 0; i < strings.Count; i++)
            {
                map.SetRow(strings[i], i);
            }


            Stopwatch sw = new Stopwatch();
            sw.Start();

            var decideWhereToGo = map.DecideWhereToGo(new Point(11, 18));
            decideWhereToGo.ShouldBe("UP");

            sw.ElapsedMilliseconds.ShouldBeLessThan(150);
        }

    }
}
